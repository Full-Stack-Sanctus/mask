plugins {
    id 'com.android.application' // Android plugin
}

repositories {
    mavenCentral()
}

sourceSets {
        main {
            java.srcDirs += ['app/src/main/java']
        }
    }
    
    
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def maskVersionCode = localProperties.getProperty('mask.versionCode', '1')
def maskVersionName = localProperties.getProperty('mask.versionName', '1.0')



dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.13.0-alpha07'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0-rc01'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.0-alpha05' // For Lifecycle support
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.14' // If you need networking capabilities
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}




// Android configuration
android {
    namespace "com.mask"
    compileSdkVersion 34

    defaultConfig {
        applicationId "com.mask" // Change to your package name
        minSdkVersion 33
        targetSdkVersion 34
        versionCode maskVersionCode.toInteger()
        versionName maskVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE_FILE"))
           
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }
    }
    
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }




    lintOptions {
        disable 'InvalidPackage'
    }
}





// Task to create the manifest file outside the build directory
task createManifestFile {
    doLast {
        // Define the path for the manifest file outside of `build` to prevent deletion during clean
        def manifestFile = file("$projectDir/tmp/manifest.mf")
        manifestFile.parentFile.mkdirs() // Ensure the directory exists

        // Write the Main-Class attribute to the manifest file without extra spaces
        manifestFile.text = """\
Manifest-Version: 1.0
Main-Class: com.mask.MainActivity
""".trim()

        println "Manifest file created at ${manifestFile.path}"
    }
}

// Task to build the JAR file with Ant, using the manifest file created above
task buildJar(dependsOn: ['assembleDebug', createManifestFile]) { // Depend on assembleDebug
    doLast {
        def jarDir = file("${project.buildDir}/libs")
        jarDir.mkdirs() // Create the directory if it doesn't exist
        def manifestFile = file("$projectDir/tmp/manifest.mf") // Use the stable manifest location

        // Use the built classes directory from the debug build
        def classesDir = file("${project.buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes") // Adjust if necessary

        // Check if the classesDir exists
        if (!classesDir.exists()) {
            throw new GradleException("The compiled classes directory does not exist: ${classesDir}")
        }

        // Use Ant to create the JAR file with the external manifest file
        ant.jar(destfile: "${jarDir}/Mask.jar", basedir: classesDir, manifest: manifestFile)
        
        println "JAR file created at ${jarDir}/Mask.jar"
    }
}

// Task to build APK
task buildApk {
    doLast {
        println "Building APK..."
        exec {
            commandLine 'bash', '-c', "${project.rootDir}/gradlew assembleRelease"
        }
        println "APK built successfully."
    }
}

// Main task to build both JAR and APK in sequence
task buildAll {
    dependsOn buildJar, buildApk

    doLast {
        println "Both JAR and APK have been built."
    }
}
